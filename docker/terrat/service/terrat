#! /usr/bin/env python3

import os
import subprocess
import sys
import time
import requests

TERRAT_API_BASE = 'TERRAT_API_BASE'
TERRAT_UI_BASE = 'TERRAT_UI_BASE'
GITHUB_API_BASE_URL = 'GITHUB_API_BASE_URL'
REQUIRED_ENV_KEYS = []

def setup_environment():
    if os.getenv('CUSTOM_CA_CERT'):
        cert_path_root = '/usr/local/share/ca-certificates/'
        certs = [cert
                 for cert in os.getenv('CUSTOM_CA_CERT').split('-----END CERTIFICATE-----')
                 if cert.strip()]
        for idx in range(len(certs)):
            cert_path = os.path.join(cert_path_root, 'custom-ca-cert-{}.crt'.format(idx))
            with open(cert_path, 'w') as cert_file:
                cert_file.write((certs[idx] + '-----END CERTIFICATE-----').strip())
        subprocess.check_call(['update-ca-certificates'])
        os.environ['CERTS_DIR'] = '/etc/ssl/certs'
        print(f"Self-signed certificate installed to {cert_path}")
    if 'GITHUB_APP_PEM' in os.environ:
        os.environ['GITHUB_APP_PEM'] = os.environ['GITHUB_APP_PEM'].replace('\\n', '\n')
    os.environ['TERRAT_PYTHON_EXEC'] = '/usr/bin/python3'
    os.environ['OCAMLRUNPARAM'] = 'b'
    os.environ['NGINX_STATUS_URI'] = 'http://localhost:8080/nginx_status'
    os.environ['TERRAT_PORT'] = '8180'
    os.environ.setdefault(GITHUB_API_BASE_URL, 'https://api.github.com')
    os.environ.setdefault('INFRACOST_PRICING_API_ENDPOINT', '')
    os.environ.setdefault('SELF_HOSTED_INFRACOST_API_KEY', '')

def assert_required_env_keys():
    missing_keys = [
      k for k in REQUIRED_ENV_KEYS
      if k not in os.environ
    ]

    if missing_keys:
        print('Missing environment variables: {}'.format(' '.join(missing_keys)))
        print('Please see https://docs.terrateam.io/self-hosted for what variables are required')
        sys.exit(1)

def get_tunnel_hostname(terratunnel_endpoint):
    try:
        response = requests.get(f"{terratunnel_endpoint}/status", timeout=5)
        response.raise_for_status()
        data = response.json()
        if data.get('connected') and data.get('tunnel_hostname'):
            return data['tunnel_hostname']
    except Exception as e:
        print(f"Failed to fetch tunnel hostname: {e}")
    return None

def set_terrat_env_from_tunnel():
    """Set TERRAT_API_BASE and TERRAT_UI_BASE from terratunnel if not already set"""
    if not os.environ.get('TERRATUNNEL_API_ENDPOINT'):
        return

    tunnel_hostname = None

    # Set TERRAT_API_BASE if not already set
    if not os.environ.get(TERRAT_API_BASE):
        print('TERRAT_API_BASE not set, attempting to fetch from terratunnel...')
        tunnel_hostname = get_tunnel_hostname(os.environ['TERRATUNNEL_API_ENDPOINT'])
        if tunnel_hostname:
            os.environ[TERRAT_API_BASE] = f"https://{tunnel_hostname}/api"
            print(f"Set TERRAT_API_BASE to: {os.environ[TERRAT_API_BASE]}")
        else:
            print("Failed to get tunnel hostname from terratunnel")

    # Set TERRAT_UI_BASE if not already set
    if not os.environ.get(TERRAT_UI_BASE):
        print('TERRAT_UI_BASE not set, attempting to fetch from terratunnel...')
        if tunnel_hostname is None:
            tunnel_hostname = get_tunnel_hostname(os.environ['TERRATUNNEL_API_ENDPOINT'])
        if tunnel_hostname:
            os.environ[TERRAT_UI_BASE] = f"https://{tunnel_hostname}/"
            print(f"Set TERRAT_UI_BASE to: {os.environ[TERRAT_UI_BASE]}")
        else:
            print("Failed to get tunnel hostname from terratunnel")

def assert_run_mode():
    if not os.environ.get(TERRAT_API_BASE):
        print('TERRAT_API_BASE must be set')
        print('Please see https://docs.terrateam.io/self-hosted for more information')
        sys.exit(1)

def main():
    print('Starting...')

    # Sleep in case we're in a bad runit loop
    time.sleep(3)

    assert_required_env_keys()

    # Set TERRAT_API_BASE and TERRAT_UI_BASE from terratunnel if not already set
    set_terrat_env_from_tunnel()

    assert_run_mode()

    setup_environment()

    # Run db migration
    subprocess.check_call(['/usr/local/bin/terrat', 'migrate', '--verbosity=debug'])

    # Run server
    if os.environ.get('TERRAT_STRACE'):
        os.execv('/usr/bin/strace',
                 [
                     '/usr/bin/strace',
                     '-ff',
                     '-o',
                     '/tmp/strace.log',
                     '-t',
                     '-s',
                     '100',
                     '-v',
                     '/usr/local/bin/terrat',
                     'server', '--verbosity=debug'
                 ])
    else:
        os.execv('/usr/local/bin/terrat', ['/usr/local/bin/terrat', 'server', '--verbosity=debug'])

if __name__ == '__main__':
    main()
