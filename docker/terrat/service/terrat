#! /usr/bin/env python3

import os
import subprocess
import sys
import time

TERRAT_API_BASE = 'TERRAT_API_BASE'
GITHUB_API_BASE_URL = 'GITHUB_API_BASE_URL'
REQUIRED_ENV_KEYS = ['GITHUB_APP_PEM']

def setup_environment():
    if os.getenv('CUSTOM_CA_CERT'):
        cert_path_root = '/usr/local/share/ca-certificates/'
        certs = [cert
                 for cert in os.getenv('CUSTOM_CA_CERT').split('-----END CERTIFICATE-----')
                 if cert.strip()]
        for idx in range(len(certs)):
            cert_path = os.path.join(cert_path_root, 'custom-ca-cert-{}.crt'.format(idx))
            with open(cert_path, 'w') as cert_file:
                cert_file.write((certs[idx] + '-----END CERTIFICATE-----').strip())
        subprocess.check_call(['update-ca-certificates'])
        os.environ['CERTS_DIR'] = '/etc/ssl/certs'
        print(f"Self-signed certificate installed to {cert_path}")
    os.environ['GITHUB_APP_PEM'] = os.environ['GITHUB_APP_PEM'].replace('\\n', '\n')
    os.environ['TERRAT_PYTHON_EXEC'] = '/usr/bin/python3'
    os.environ['OCAMLRUNPARAM'] = 'b'
    os.environ['NGINX_STATUS_URI'] = 'http://localhost:8080/nginx_status'
    os.environ['TERRAT_PORT'] = '8180'
    os.environ.setdefault(GITHUB_API_BASE_URL, 'https://api.github.com')
    os.environ.setdefault('INFRACOST_PRICING_API_ENDPOINT', '')
    os.environ.setdefault('SELF_HOSTED_INFRACOST_API_KEY', '')

def assert_required_env_keys():
    missing_keys = [
      k for k in REQUIRED_ENV_KEYS
      if k not in os.environ
    ]

    if missing_keys:
        print('Missing environment variables: {}'.format(' '.join(missing_keys)))
        print('Please see https://docs.terrateam.io/self-hosted for what variables are required')
        sys.exit(1)

def assert_run_mode():
    if not os.environ.get(TERRAT_API_BASE):
        print('TERRAT_API_BASE must be set')
        print('Please see https://docs.terrateam.io/self-hosted for more information')
        sys.exit(1)

def main():
    print('Starting...')

    # Sleep in case we're in a bad runit loop
    time.sleep(3)

    assert_required_env_keys()
    assert_run_mode()

    setup_environment()

    if not os.environ.get(TERRAT_API_BASE):
        raise Exception('TERRAT_API_BASE must be specified')

    # If the UI assets exist, generate the index file from template
    if os.path.exists('/usr/local/share/terrat/ui/assets/index.html.tmpl'):
        print('UI Assets exist, creating index page')
        with open('/usr/local/share/terrat/ui/assets/index.html', 'w') as fout:
            subprocess.check_call(
                ['/usr/local/share/terrat/ui/assets/index.html.tmpl'],
                stdout=fout)

    # Run db migration
    subprocess.check_call(['/usr/local/bin/terrat', 'migrate', '--verbosity=debug'])

    # Run server
    if os.environ.get('TERRAT_STRACE'):
        os.execv('/usr/bin/strace',
                 [
                     '/usr/bin/strace',
                     '-ff',
                     '-o',
                     '/tmp/strace.log',
                     '-t',
                     '-s',
                     '100',
                     '-v',
                     '/usr/local/bin/terrat',
                     'server', '--verbosity=debug'
                 ])
    else:
        os.execv('/usr/local/bin/terrat', ['/usr/local/bin/terrat', 'server', '--verbosity=debug'])

if __name__ == '__main__':
    main()
