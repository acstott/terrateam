let src = Logs.Src.create "vcs_service_gitlab_ep_callback"

module Logs = (val Logs.src_log src : Logs.LOG)

(* let get config storage code state ctx = *)
(*   let open Abb.Future.Infix_monad in *)
(*   perform_auth config storage code *)
(*   >>= function *)
(*   | Ok user -> *)
(*       let ctx = Terrat_session.create_user_session user ctx in *)
(*       let uri = *)
(*         ctx *)
(*         |> Brtl_ctx.uri_base *)
(*         |> CCFun.flip Uri.with_path "/" *)
(*         |> CCFun.flip *)
(*              Uri.with_query *)
(*              (CCOption.map_or *)
(*                 ~default:[] *)
(*                 (fun installation_id -> *)
(*                   [ ("installation_id", [ Int64.to_string installation_id ]) ]) *)
(*                 installation_id_opt) *)
(*         |> Uri.to_string *)
(*       in *)
(*       let headers = Cohttp.Header.of_list [ ("location", uri) ] in *)
(*       Abb.Future.return *)
(*         (Brtl_ctx.set_response (Brtl_rspnc.create ~headers ~status:`See_other "") ctx) *)
(*   | Error (#Pgsql_pool.err as err) -> *)
(*       Logs.err (fun m -> m "FAIL : %s" (Pgsql_pool.show_err err)); *)
(*       Abb.Future.return *)
(*         (Brtl_ctx.set_response (Brtl_rspnc.create ~status:`Internal_server_error "") ctx) *)
(*   | Error (#Pgsql_io.err as err) -> *)
(*       Logs.err (fun m -> m "FAIL : %s" (Pgsql_io.show_err err)); *)
(*       Abb.Future.return *)
(*         (Brtl_ctx.set_response (Brtl_rspnc.create ~status:`Internal_server_error "") ctx) *)
(*   | Error (#Terrat_github.user_err as err) -> *)
(*       Logs.err (fun m -> m "FAIL : %s" (Terrat_github.show_user_err err)); *)
(*       Abb.Future.return *)
(*         (Brtl_ctx.set_response (Brtl_rspnc.create ~status:`Internal_server_error "") ctx) *)
(*   | Error (#Terrat_github.Oauth.authorize_err as err) -> *)
(*       Logs.err (fun m -> m "FAIL : %a" Terrat_github.Oauth.pp_authorize_err err); *)
(*       Abb.Future.return *)
(*         (Brtl_ctx.set_response (Brtl_rspnc.create ~status:`Internal_server_error "") ctx) *)

let get config storage code state ctx =
  Logs.info (fun m -> m "%s : code=%s : state=%s" (Brtl_ctx.token ctx) code state);
  Abb.Future.return (Brtl_ctx.set_response (Brtl_rspnc.create ~status:`OK "") ctx)
