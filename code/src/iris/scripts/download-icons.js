#!/usr/bin/env node

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// List of all icons used in the project
const ICONS = [
  // MDI icons
  'mdi:github',
  'mdi:gitlab',
  'mdi:check',
  'mdi:check-circle',
  'mdi:magnify',
  'mdi:lightbulb',
  'mdi:download',
  'mdi:loading',
  'mdi:source-fork',
  'mdi:source-repository',
  'mdi:play-circle',
  'mdi:file-edit',
  'mdi:arrow-left',
  'mdi:open-in-new',
  'mdi:numeric-1-circle',
  'mdi:numeric-2-circle',
  'mdi:numeric-3-circle',
  'mdi:numeric-4-circle',
  'mdi:party-popper',
  'mdi:flash',
  'mdi:alert',
  'mdi:alert-circle',
  'mdi:folder-account',
  'mdi:robot',
  'mdi:webhook',
  'mdi:cog',
  'mdi:shield-lock',
  'mdi:information',
  'mdi:headset',
  'mdi:calendar-clock',
  'mdi:tools',
  'mdi:book-open-variant',
  'mdi:folder',
  'mdi:file-code',
  'mdi:file',
  'mdi:wrench-outline',
  'mdi:key-outline',
  'mdi:shield-lock-outline',
  'mdi:account-plus',
  'mdi:folder-alert-outline',
  'mdi:chevron-right',
  'mdi:cloud-check',
  'mdi:test-tube',
  'mdi:plus',
  'mdi:check-all',
  'mdi:check-underline',
  'mdi:arrow-up',
  'mdi:arrow-down',
  'mdi:clock-outline',
  'mdi:information-outline',
  'mdi:link',
  'mdi:power',
  'mdi:star',
  'mdi:star-outline',
  'mdi:run',
  'mdi:weather-cloudy',
  'mdi:close-circle',
  'mdi:cancel',
  'mdi:delete',
  'mdi:message-text',
  'mdi:sync',
  'mdi:help-circle',
  'mdi:close',
  'mdi:refresh',
  'mdi:earth',
  'mdi:chevron-down',
  'mdi:account',
  'mdi:city',
  'mdi:email',
  'mdi:phone',
  'mdi:briefcase',
  'mdi:cash',
  'mdi:clock',
  'mdi:alert-octagon',
  'mdi:export',
  'mdi:login',
  'mdi:logout',
  
  // Logos
  'logos:aws',
  'logos:google-cloud',
  'logos:microsoft-azure'
];

const ICONS_DIR = path.join(__dirname, '..', 'src', 'lib', 'icons');

async function downloadIcon(iconName) {
  const [prefix, name] = iconName.split(':');
  const url = `https://api.iconify.design/${prefix}/${name}.svg`;
  
  try {
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`Failed to download ${iconName}: ${response.statusText}`);
    }
    
    const svg = await response.text();
    
    // Create directory if it doesn't exist
    const iconDir = path.join(ICONS_DIR, prefix);
    await fs.mkdir(iconDir, { recursive: true });
    
    // Save the SVG file
    const filePath = path.join(iconDir, `${name}.svg`);
    await fs.writeFile(filePath, svg);
    
    console.log(`✓ Downloaded ${iconName}`);
    return { iconName, success: true };
  } catch (error) {
    console.error(`✗ Failed to download ${iconName}:`, error.message);
    return { iconName, success: false, error: error.message };
  }
}

async function generateIconIndex() {
  const indexContent = `// Auto-generated icon index
// DO NOT EDIT MANUALLY - Generated by scripts/download-icons.js

export const iconMap = {
${ICONS.map(icon => {
  const [prefix, name] = icon.split(':');
  return `  '${icon}': () => import('./${prefix}/${name}.svg?raw')`;
}).join(',\n')}
};

export type IconName = keyof typeof iconMap;
`;

  await fs.writeFile(path.join(ICONS_DIR, 'index.ts'), indexContent);
  console.log('✓ Generated icon index');
}

async function main() {
  console.log('Downloading Iconify icons...\n');
  
  // Create icons directory
  await fs.mkdir(ICONS_DIR, { recursive: true });
  
  // Download all icons
  const results = await Promise.all(ICONS.map(downloadIcon));
  
  // Generate index file
  await generateIconIndex();
  
  // Summary
  const successful = results.filter(r => r.success).length;
  const failed = results.filter(r => !r.success).length;
  
  console.log(`\n✅ Successfully downloaded ${successful} icons`);
  if (failed > 0) {
    console.log(`❌ Failed to download ${failed} icons`);
  }
}

main().catch(console.error);